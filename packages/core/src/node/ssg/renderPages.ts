import type { PluginDriver } from '../PluginDriver';

import { pathToFileURL } from 'node:url';
import { HelmetData } from '@dr.pogodin/react-helmet';
import {
  type PageData,
  type Route,
  type UserConfig,
  normalizeSlash,
  withBase,
} from '@rspress/shared';
import { logger } from '@rspress/shared/logger';
import picocolors from 'picocolors';
import {
  APP_HTML_MARKER,
  BODY_START_TAG,
  HEAD_MARKER,
  HTML_START_TAG,
  META_GENERATOR,
  RSPRESS_VERSION,
} from '../constants';

import { hintSSGFailed } from '../logger/hint';
import type { RouteService } from '../route/RouteService';
import { renderConfigHead, renderFrontmatterHead } from './renderHead';

interface SSRBundleExports {
  render: (
    url: string,
    helmetContext: object,
  ) => Promise<{ appHtml: string; pageData: PageData }>;
  routes: Route[];
}

export async function renderPages(
  routeService: RouteService,
  config: UserConfig,
  pluginDriver: PluginDriver,
  ssrBundlePath: string,
  htmlTemplate: string,
  emitAsset: (assetName: string, content: string) => void,
) {
  logger.info('Rendering pages...');
  const startTime = Date.now();

  let render: SSRBundleExports['render'];
  try {
    const { default: ssrExports } = await import(
      pathToFileURL(ssrBundlePath).toString()
    );
    ({ render } = ssrExports as SSRBundleExports);
  } catch (e) {
    if (e instanceof Error) {
      logger.error(
        `Failed to load SSG bundle: ${picocolors.yellow(ssrBundlePath)}: ${e.message}`,
      );
      logger.debug(e);
      hintSSGFailed();
    }
    throw e;
  }

  try {
    const routes = routeService!.getRoutes();
    const base = config?.base ?? '';

    // Get the html generated by builder, as the default ssr template
    const additionalRoutes = (await pluginDriver.addSSGRoutes()).map(route => ({
      routePath: withBase(route.path, base),
    }));
    const allRoutes = [...routes, ...additionalRoutes];
    const is404RouteInRoutes = allRoutes.some(
      route => route.routePath === '/404',
    );
    if (!is404RouteInRoutes) {
      allRoutes.push({
        routePath: '/404',
      });
    }
    await Promise.all(
      allRoutes
        .filter(route => {
          // filter the route including dynamic params
          return !route.routePath.includes(':');
        })
        .map(async route => {
          const helmetContext = new HelmetData({});
          const { routePath } = route;
          let appHtml = '';
          if (render) {
            try {
              ({ appHtml } = await render(routePath, helmetContext.context));
            } catch (e) {
              logger.error(
                `Page "${picocolors.yellow(routePath)}" SSG rendering failed.`,
              );
              logger.debug(e);
              throw e;
            }
          }

          const { helmet } = helmetContext.context;
          let html = htmlTemplate
            // During ssr, we already have the title in react-helmet
            .replace(/<title>(.*?)<\/title>/gi, '')
            // Don't use `string` as second param
            // To avoid some special characters transformed to the marker, such as `$&`, etc.
            .replace(APP_HTML_MARKER, () => appHtml)
            .replace(
              META_GENERATOR,
              () =>
                `<meta name="generator" content="Rspress v${RSPRESS_VERSION}">`,
            )
            .replace(
              HEAD_MARKER,
              [
                await renderConfigHead(config, route),
                helmet.title.toString(),
                helmet.meta.toString(),
                helmet.link.toString(),
                helmet.style.toString(),
                helmet.script.toString(),
                await renderFrontmatterHead(route),
              ].join(''),
            );
          if (helmet.htmlAttributes) {
            html = html.replace(
              HTML_START_TAG,
              `${HTML_START_TAG} ${helmet.htmlAttributes?.toString()}`,
            );
          }

          if (helmet.bodyAttributes) {
            html = html.replace(
              BODY_START_TAG,
              `${BODY_START_TAG} ${helmet.bodyAttributes?.toString()}`,
            );
          }

          const normalizeHtmlFilePath = (path: string) => {
            const normalizedBase = `${normalizeSlash(config?.base || '/')}/`;

            if (path.endsWith('/')) {
              return `${path}index.html`.replace(normalizedBase, '');
            }

            return `${path}.html`.replace(normalizedBase, '');
          };
          const fileName = normalizeHtmlFilePath(routePath);
          emitAsset(fileName, html);
        }),
    );

    const totalTime = Date.now() - startTime;
    logger.success(`Pages rendered in ${picocolors.yellow(totalTime)} ms.`);
  } catch (e: unknown) {
    if (e instanceof Error) {
      logger.error(`Pages render error: ${e.message}`);
      logger.debug(e);
      hintSSGFailed();
    }
    throw e;
  }
}
