// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`remarkWrapMarkdown with filters > should lynx 1`] = `
"/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {Required, Deprecated, AndroidOnly, IOSOnly, Go, LegacyCompatTable} from '@lynx';
import {PropsTable, EventsTable, MethodsTable} from '@theme/reference';
import {InputProps, InputEvents, InputMethods} from '@theme/reference/generated/input';
function _createMdxContent(props) {
  return <>{"***\\n"}{"\\n"}{"## context: 'XElement'\\n"}{"\\n"}{"# \`<input>\`\\n"}{"\\n"}{"\\n"}{"\`<input>\` 用于创建交互式输入控件，允许用户输入和编辑单行文本。\\n"}{"\\n"}{":::info\\n"}{"\\n"}{"此功能需要客户端添加额外依赖才能被使用，集成方式请请参考 [More Elements](/guide/start/integrate-with-existing-apps).\\n"}{"\\n"}{":::\\n"}{"\\n"}{"## 使用指南\\n"}{"\\n"}{"### 基本用法\\n"}{"\\n"}{"下面是一个基本的 \`<input>\` 组件用法示例：\\n"}{"\\n"}<Go example="input" defaultFile="src/base/index.tsx" img="https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/plugin/static/input_basic.PNG" highlight="{13-20}" />{"\\n"}{"### 避让键盘\\n"}{"\\n"}{"\`<input>\`不会自动的避让键盘，但可以通过监听键盘事件获取相应的高度，并以此改变\`<input>\`的位置，来进行避让：\\n"}{"\\n"}<Go example="input" defaultFile="src/auto-height/index.tsx" img="https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/plugin/static/input_auto_height.PNG" highlight="{116-123}" />{"\\n"}{"## 属性\\n"}{"\\n"}{"属性名和属性值用于描述元件的行为和外观。\\n"}{"\\n"}{"### \`placeholder\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: undefined\\nplaceholder?: string\\n\`\`\`\\n"}{"\\n"}{"占位文字\\n"}{"\\n"}{"### \`confirm-type\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: undefined\\n'confirm-type'?: 'send' | 'search' | 'go' | 'done' | 'next';\\n\`\`\`\\n"}{"\\n"}{"指定输入法回车键的表现形式\\n"}{"\\n"}{"### \`maxlength\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: 140\\nmaxlength?: number;\\n\`\`\`\\n"}{"\\n"}{"输入框最大字符数量限制\\n"}{"\\n"}{"### \`readonly\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: false\\nreadonly?: boolean;\\n\`\`\`\\n"}{"\\n"}{"是否允许输入框可交互，不影响对其进行组件方法调用\\n"}{"\\n"}{"### \`show-soft-input-on-focus\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: true\\n'show-soft-input-on-focus'?: boolean;\\n\`\`\`\\n"}{"\\n"}{"聚焦时是否允许拉起系统软键盘\\n"}{"\\n"}{"### \`type\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: 'text'\\ntype?: 'text' | 'number' | 'digit' | 'password' | 'tel' | 'email';\\n\`\`\`\\n"}{"\\n"}{"指定键盘的类型\\n"}{"\\n"}{"- text\\\\tel\\\\email: 全符号\\n- number: 0-9 +-.\\n- digit: 0-9 .\\n- password: 内容变为 \\\\* 号，全符号\\n"}{"\\n"}{"::: info\\n不同的输入法可能会有不同的视觉表现\\n:::\\n"}{"\\n"}{"### \`input-filter\`\\n"}{"\\n"}{"\`\`\`ts\\n// DefaultValue: undefined\\n'input-filter'?: string;\\n\`\`\`\\n"}{"\\n"}{"指定单个字符的过滤条件，用正则表达式描述\\n"}{"\\n"}{"## 事件\\n"}{"\\n"}{"前端可以在元件上设置[事件处理器属性](../../../guide/interaction/event-handling/event-propagation.mdx#事件处理器属性)来监听元件的运行时行为。\\n"}{"\\n"}{"### \`bindfocus\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputFocusEvent {\\n  value: string;\\n}\\n bindfocus?: (e: BaseEvent<'bindfocus', InputFocusEvent>) => void;\\n\`\`\`\\n"}{"\\n"}{"输入框聚焦时的回调\\n"}{"\\n"}{"### \`bindblur\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputBlurEvent {\\n  value: string;\\n}\\nbindblur?: (e: BaseEvent<'bindblur', InputBlurEvent>) => void;\\n\`\`\`\\n"}{"\\n"}{"输入框失去焦点时的回调\\n"}{"\\n"}{"### \`bindconfirm\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputConfirmEvent {\\n  value: string;\\n}\\nbindconfirm?: (e: BaseEvent<'bindconfirm', InputConfirmEvent>) => void;\\n\`\`\`\\n"}{"\\n"}{"点击软键盘回车时的回调\\n"}{"\\n"}{"### \`bindinput\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputInputEvent {\\n  value: string;\\n  selectionStart: number;\\n  selectionEnd: number;\\n  isComposing?: boolean;\\n}\\nbindinput?: (e: BaseEvent<'bindinput', InputInputEvent>) => void;\\n\`\`\`\\n"}{"\\n"}{"输入框内容变化的回调\\n"}{"\\n"}{"### \`bindselection\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputSelectionEvent {\\n  selectionStart: number;\\n  selectionEnd: number;\\n}\\nbindselection?: (e: BaseEvent<'bindselection', InputSelectionEvent>) => void;\\n\`\`\`\\n"}{"\\n"}{"输入框光标变化的回调\\n"}{"\\n"}{"## 方法\\n"}{"\\n"}{"前端可以通过 [SelectorQuery](/api/lynx-api/nodes-ref/nodes-ref-invoke.html) API 执行元件的方法。\\n"}{"\\n"}{"### \`focus\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputFocusMethod extends BaseMethod {\\n  method: 'focus';\\n}\\n\`\`\`\\n"}{"\\n"}{"控制输入框主动聚焦\\n"}{"\\n"}{"### \`blur\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputBlurMethod extends BaseMethod {\\n  method: 'blur';\\n}\\n\`\`\`\\n"}{"\\n"}{"控制输入框主动取消聚焦\\n"}{"\\n"}{"### \`getValue\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputGetValueMethod extends BaseMethod {\\n  method: 'getValue';\\n  success?: Callback<{\\n    value: string;\\n    selectionStart: number;\\n    selectionEnd: number;\\n    isComposing: boolean;\\n  }>;\\n}\\n\`\`\`\\n"}{"\\n"}{"获取输入框的内容\\n"}{"\\n"}{"### \`setValue\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputSetValueMethod extends BaseMethod {\\n  method: 'setValue';\\n  params: {\\n    value: string;\\n  };\\n}\\n\`\`\`\\n"}{"\\n"}{"主动设置输入框的内容\\n"}{"\\n"}{"### \`setSelectionRange\`\\n"}{"\\n"}{"\`\`\`ts\\nexport interface InputSetSelectionRangeMethod extends BaseMethod {\\n  method: 'setSelectionRange';\\n  params: {\\n    selectionStart: number;\\n    selectionEnd: number;\\n  };\\n}\\n\`\`\`\\n"}{"\\n"}{"主动设置输入框的光标\\n"}{"\\n"}{"## 兼容性\\n"}{"\\n"}{"<LegacyCompatTable metadata=\\"elements/input\\" />\\n"}</>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
"
`;
